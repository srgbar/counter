{"version":3,"sources":["App.module.css","components/Navbar/Navbar.module.css","bll/counter-reducer.ts","components/Button/Button.tsx","components/CounterDisplay/Display.tsx","components/CounterDisplay/CounterDisplay.tsx","components/SettingsDisplay/Input.tsx","components/SettingsDisplay/SettingsDisplay.tsx","components/GeneralDisplayRootComponent.tsx","components/Navbar/Navbar.tsx","components/SeparateDisplayRootComponent.tsx","App.tsx","serviceWorker.ts","bll/store.ts","utils/localstorage-utils.ts","index.tsx"],"names":["module","exports","initialState","value","startValue","maxValue","Button","props","className","s","button","disabled","disable","onClick","onClickHandler","titleButton","Display","condition","displayCount","errorSettings","isMessage","errorName","messageName","CounterDisplay","history","useHistory","type","containerDisplay","containerButton","incData","resData","push","Input","title","input","errorInput","onChange","e","onChangeCallback","SettingsDisplay","displaySet","containerInput","onChangeHandlerStart","parentDiv","onChangeHandlerMax","onClickSettings","GeneralDisplayRootComponent","onClickSettingsV2","exact","path","render","containerRoot","Navbar","navbar","item","to","route","SeparateDisplayRootComponent","App","useSelector","state","counter","dispatch","useDispatch","useState","setIsMessage","changeStartValueAC","currentTarget","changeMaxValueAC","setValuesAC","console","log","app","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,cAAgB,2BAA2B,iBAAmB,8BAA8B,aAAe,0BAA0B,WAAa,wBAAwB,eAAiB,4BAA4B,MAAQ,mBAAmB,WAAa,wBAAwB,gBAAkB,6BAA6B,OAAS,oBAAoB,SAAW,sBAAsB,UAAY,uBAAuB,YAAc,yBAAyB,cAAgB,6B,mBCAvgBD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,qBAAqB,MAAQ,wB,0LCQhFC,EAAe,CACjBC,MAAO,EACPC,WAAY,EACZC,SAAU,GCMCC,EATA,SAACC,GACZ,OAAO,oCACH,4BAAQC,UAAWC,IAAEC,OACbC,SAAUJ,EAAMK,QAChBC,QAAS,kBAAMN,EAAMO,mBAC3BP,EAAMQ,eCJT,SAASC,EAAQT,GAEpB,OAAO,oCACDA,EAAMU,UASF,0BAAMT,UAAS,UAAKC,IAAES,aAAP,YAAuBT,IAAEU,gBAAxC,oBARCZ,EAAMa,UAEHb,EAAMJ,OAASI,EAAMF,SACjB,yBAAKG,UAAS,UAAKC,IAAES,aAAP,YAAuBT,IAAEJ,WACrC,8BAAOE,EAAMJ,OACb,0BAAMK,UAAWC,IAAEY,WAAnB,cAEF,0BAAMb,UAAWC,IAAES,cAAeX,EAAMJ,OAN5C,0BAAMK,UAAS,UAAKC,IAAES,aAAP,YAAuBT,IAAEa,cAAxC,iCCElB,IA0DeC,EA1DQ,SAAChB,GAEpB,IAAMiB,EAAUC,cAMhB,MAAmB,cAAflB,EAAMmB,KACC,yBAAKlB,UAAWC,IAAEkB,kBACrB,kBAACX,EAAD,CAASb,MAAOI,EAAMJ,MACbE,SAAUE,EAAMF,SAChBe,UAAWb,EAAMa,UACjBH,UAAWV,EAAMU,YAE1B,yBAAKT,UAAWC,IAAEmB,iBACd,kBAAC,EAAD,CACIb,YAAa,MACbH,QAASL,EAAMJ,OAASI,EAAMF,SAC9BS,eAAgBP,EAAMsB,UAE1B,kBAAC,EAAD,CACId,YAAa,QACbH,QAASL,EAAMJ,OAASI,EAAMH,WAC9BU,eAAgBP,EAAMuB,YAIZ,cAAfvB,EAAMmB,KACN,yBAAKlB,UAAWC,IAAEkB,kBACrB,kBAACX,EAAD,CAASb,MAAOI,EAAMJ,MACbE,SAAUE,EAAMF,SAChBe,UAAWb,EAAMa,UACjBH,UAAWV,EAAMU,YAE1B,yBAAKT,UAAWC,IAAEmB,iBACd,kBAAC,EAAD,CACIb,YAAa,MACbH,QAASL,EAAMJ,OAASI,EAAMF,SAC9BS,eAAgBP,EAAMsB,UAE1B,kBAAC,EAAD,CACId,YAAa,QACbH,QAASL,EAAMJ,OAASI,EAAMH,WAC9BU,eAAgBP,EAAMuB,UAE1B,kBAAC,EAAD,CACIf,YAAa,MACbH,UAAWL,EAAMU,UACjBH,eA7CS,WACrBU,EAAQO,KAAK,4BAiDN,iDC3CAC,EAlBD,SAACzB,GAMX,OACI,6BACI,8BAAOA,EAAM0B,OACb,2BAAOzB,UAAYD,EAAMU,UAAP,UAAgCR,IAAEyB,MAAlC,YAA2CzB,IAAE0B,YAA1B1B,IAAEyB,MAChCR,KAAK,SACLU,SATS,SAACC,GACrB9B,EAAM+B,iBAAiBD,IASZlC,MAAOI,EAAMJ,UCRzB,SAASoC,EAAgBhC,GAC5B,OAAO,yBAAKC,UAAWC,IAAEkB,kBACrB,yBAAKnB,UAAWC,IAAE+B,YACd,yBAAKhC,UAAWC,IAAEgC,gBACd,kBAAC,EAAD,CAAOR,MAAO,gBACP9B,MAAOI,EAAMH,WACbkC,iBAAkB/B,EAAMmC,qBACxBzB,UAAWV,EAAMU,aAG5B,yBAAKT,UAAWC,IAAEkC,WACd,kBAAC,EAAD,CAAOV,MAAO,cACP9B,MAAOI,EAAMF,SACbiC,iBAAkB/B,EAAMqC,mBACxB3B,UAAWV,EAAMU,cAIhC,yBAAKT,UAAWC,IAAEmB,iBACd,kBAAC,EAAD,CACIb,YAAa,MACbD,eAAgBP,EAAMsC,gBACtBjC,UAAWL,EAAMU,cC7BjC,IAyCe6B,EAzCqB,SAACvC,GAEjC,IAAMiB,EAAUC,cAEVsB,EAAoB,WACtBxC,EAAMsC,kBACNrB,EAAQO,KAAK,eAGjB,OACI,6BACI,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,sBAAsBC,OAAQ,kBAC5C,yBAAK1C,UAAWC,IAAE0C,eACd,kBAACZ,EAAD,CACInC,WAAYG,EAAMH,WAClBC,SAAUE,EAAMF,SAEhBqC,qBAAsBnC,EAAMmC,qBAC5BE,mBAAoBrC,EAAMqC,mBAE1B3B,UAAWV,EAAMU,UACjB4B,gBAAiBE,QAG7B,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,aAAaC,OAAQ,kBACnC,yBAAK1C,UAAWC,IAAE0C,eACd,kBAAC,EAAD,CACIzB,KAAM,YACNvB,MAAOI,EAAMJ,MACb0B,QAAStB,EAAMsB,QACfC,QAASvB,EAAMuB,QACfzB,SAAUE,EAAMF,SAChBD,WAAYG,EAAMH,WAClBgB,UAAWb,EAAMa,UACjBH,UAAWV,EAAMU,kB,wBCrClC,SAASmC,IACZ,OACI,yBAAK5C,UAAWC,IAAE4C,QACd,yBAAK7C,UAAWC,IAAE6C,MACd,kBAAC,IAAD,CAASC,GAAG,aAAa/C,UAAWC,IAAE+C,OAAtC,mBAEJ,6BACI,kBAAC,IAAD,CAASD,GAAG,aAAa/C,UAAWC,IAAE+C,OAAtC,oBCOhB,IA0BeC,EA1BsB,SAAClD,GAElC,OACI,yBAAKC,UAAWC,IAAE0C,eACd,kBAACZ,EAAD,CACInC,WAAYG,EAAMH,WAClBC,SAAUE,EAAMF,SAChBqC,qBAAsBnC,EAAMmC,qBAC5BE,mBAAoBrC,EAAMqC,mBAC1BC,gBAAiBtC,EAAMsC,gBACvB5B,UAAWV,EAAMU,YAErB,kBAAC,EAAD,CACIS,KAAM,YACNvB,MAAOI,EAAMJ,MACb0B,QAAStB,EAAMsB,QACfC,QAASvB,EAAMuB,QACfzB,SAAUE,EAAMF,SAChBD,WAAYG,EAAMH,WAClBgB,UAAWb,EAAMa,UACjBH,UAAWV,EAAMU,cCuElByC,EAnGH,WAER,IAAMvD,EAAQwD,aAAkC,SAAAC,GAAK,OAAIA,EAAMC,QAAQ1D,SACjEC,EAAauD,aAAkC,SAAAC,GAAK,OAAIA,EAAMC,QAAQzD,cACtEC,EAAWsD,aAAkC,SAAAC,GAAK,OAAIA,EAAMC,QAAQxD,YAEpEyD,EAAWC,cAEX9C,EAAYb,EAAa,GAAKA,EAAaC,GAAYD,IAAeC,EAM5E,EAAkC2D,oBAAkB,GAApD,mBAAO5C,EAAP,KAAkB6C,EAAlB,KAiBMpC,EAAU,WACZiC,ETAyB,CAACpC,KAAM,eSG9BI,EAAU,WAEZgC,ETJsB,CAACpC,KAAM,WSQ3BgB,EAAuB,SAACL,GAC1ByB,ETR0B,SAAC1D,GAAD,MAAyB,CAACsB,KAAM,qBAAsBtB,cSQvE8D,EAAoB7B,EAAE8B,cAAchE,QAC7C8D,GAAa,IAIXrB,EAAqB,SAACP,GACxByB,ETbwB,SAACzD,GAAD,MAAuB,CAACqB,KAAM,mBAAoBrB,YSajE+D,EAAkB/B,EAAE8B,cAAchE,QAC3C8D,GAAa,IAGXpB,EAAkB,WACpBiB,ETjBmB,SAAC1D,EAAoBC,GAArB,MAA2C,CAClEqB,KAAM,aACNtB,aACAC,YScagE,CAAYjE,EAAYC,IACjC4D,GAAa,GAIbK,QAAQC,IAAInE,EAAYC,EAAUF,IAGtC,OAAO,yBAAKK,UAAWC,IAAE+D,KACrB,kBAACpB,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOH,KAAM,IAAKD,OAAK,EAACE,OAAQ,kBAAM,kBAAC,IAAD,CAAUK,GAAG,kBACnD,kBAAC,IAAD,CAAON,KAAK,aAAaC,OAAQ,kBAAM,kBAAC,EAAD,CACnC/C,MAAOA,EACPC,WAAYA,EACZC,SAAUA,EAEVwB,QAASA,EACTC,QAASA,EAETY,qBAAsBA,EACtBE,mBAAoBA,EACpBC,gBAAiBA,EAEjBzB,UAAWA,EACXH,UAAWA,OAEf,kBAAC,IAAD,CAAOgC,KAAK,aAAaC,OAAQ,kBAAM,kBAAC,EAAD,CACnC/C,MAAOA,EACPC,WAAYA,EACZC,SAAUA,EAEVwB,QAASA,EACTC,QAASA,EAETY,qBAAsBA,EACtBE,mBAAoBA,EACpBC,gBAAiBA,EAEjBzB,UAAWA,EACXH,UAAWA,UC3FPwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCdAC,EAAcC,YAAgB,CAChClB,QXU0B,WAAmF,IAAlFD,EAAiF,uDAAvD1D,EAAc8E,EAAyC,uCAC5G,OAAQA,EAAOtD,MACX,IAAK,YACD,OAAO,2BACAkC,GADP,IACczD,MAAOyD,EAAMzD,MAAQ,IAEvC,IAAK,QACD,OAAO,2BACAyD,GADP,IACczD,MAAOyD,EAAMxD,aAE/B,IAAK,qBACD,OAAO,2BACAwD,GADP,IACcxD,WAAY4E,EAAO5E,aAErC,IAAK,mBACD,OAAO,2BACAwD,GADP,IACcvD,SAAU2E,EAAO3E,WAEnC,IAAK,aACD,OAAO,2BACAuD,GADP,IACczD,MAAO6E,EAAO5E,WAAYC,SAAU2E,EAAO3E,SAAUD,WAAY4E,EAAO5E,aAE1F,QACI,OAAOwD,MW9BNqB,EAAQC,YAAYJ,ECNR,WACrB,IACI,IAAMK,EAAkBC,aAAaC,QAAQ,aAC7C,GAAwB,OAApBF,EACA,OAEJ,OAAOG,KAAKC,MAAMJ,GACpB,MAAOK,GACL,QDFsCC,IAE9CR,EAAMS,WAAU,YCIS,SAAC9B,GACtB,IACI,IAAMuB,EAAkBG,KAAKK,UAAU/B,GACvCwB,aAAaQ,QAAQ,YAAaT,GACpC,WDPFU,CAAU,CACNhC,QAASoB,EAAMa,WAAWjC,aEHlCkC,IAAS7C,OACL,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAU+B,MAAOA,GACb,kBAAC,EAAD,QAEOe,SAASC,eAAe,SH6HrC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.2418988a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3l119\",\"containerRoot\":\"App_containerRoot__dSgI_\",\"containerDisplay\":\"App_containerDisplay__1TjDc\",\"displayCount\":\"App_displayCount__1S_yD\",\"displaySet\":\"App_displaySet__2PGur\",\"containerInput\":\"App_containerInput__2IvuE\",\"input\":\"App_input__3Nv2u\",\"errorInput\":\"App_errorInput__2WNWH\",\"containerButton\":\"App_containerButton__1U5Q_\",\"button\":\"App_button__21w86\",\"maxValue\":\"App_maxValue__2PIjF\",\"errorName\":\"App_errorName__1sqo9\",\"messageName\":\"App_messageName__hpcUA\",\"errorSettings\":\"App_errorSettings__TvrlT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__2GuZ4\",\"item\":\"Navbar_item__1H-da\",\"route\":\"Navbar_route__1SyCJ\"};","type ActionType =\r\n    ReturnType<typeof incValueAC>\r\n    | ReturnType<typeof resetAC>\r\n    | ReturnType<typeof changeStartValueAC>\r\n    | ReturnType<typeof changeMaxValueAC>\r\n    | ReturnType<typeof setValuesAC>\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    value: 0,\r\n    startValue: 0,\r\n    maxValue: 5,\r\n}\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"INC-VALUE\":\r\n            return {\r\n                ...state, value: state.value + 1\r\n            }\r\n        case \"RESET\":\r\n            return {\r\n                ...state, value: state.startValue\r\n            }\r\n        case \"CHANGE-START-VALUE\":\r\n            return {\r\n                ...state, startValue: action.startValue\r\n            }\r\n        case \"CHANGE-MAX-VALUE\":\r\n            return {\r\n                ...state, maxValue: action.maxValue\r\n            }\r\n        case \"SET-VALUES\":\r\n            return {\r\n                ...state, value: action.startValue, maxValue: action.maxValue, startValue: action.startValue\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const incValueAC = () => ({type: \"INC-VALUE\"} as const)\r\nexport const resetAC = () => ({type: \"RESET\"} as const)\r\nexport const changeStartValueAC = (startValue: number) => ({type: \"CHANGE-START-VALUE\", startValue} as const)\r\nexport const changeMaxValueAC = (maxValue: number) => ({type: \"CHANGE-MAX-VALUE\", maxValue} as const)\r\nexport const setValuesAC = (startValue: number, maxValue: number) => ({\r\n    type: \"SET-VALUES\",\r\n    startValue,\r\n    maxValue\r\n} as const)","import React from \"react\";\r\nimport s from \"../../App.module.css\"\r\n\r\nexport type ButtonPropsType = {\r\n    titleButton: string\r\n    disable: boolean\r\n    onClickHandler: () => void\r\n}\r\n\r\nconst Button = (props: ButtonPropsType) => {\r\n    return <>\r\n        <button className={s.button}\r\n                disabled={props.disable}\r\n                onClick={() => props.onClickHandler()}\r\n        >{props.titleButton}</button>\r\n    </>\r\n}\r\n\r\nexport default Button\r\n","import React from \"react\";\r\nimport s from \"../../App.module.css\"\r\n\r\ntype DisplayPropsType = {\r\n    value: number\r\n    maxValue: number\r\n    isMessage: boolean\r\n    condition: boolean\r\n}\r\n\r\nexport function Display(props: DisplayPropsType) {\r\n\r\n    return <>\r\n        {!props.condition\r\n            ? !props.isMessage\r\n                ? <span className={`${s.displayCount} ${s.messageName}`}>Enter values and press 'set'</span>\r\n                : props.value >= props.maxValue\r\n                    ? <div className={`${s.displayCount} ${s.maxValue}`}>\r\n                        <span>{props.value}</span>\r\n                        <span className={s.errorName}>max value</span>\r\n                    </div>\r\n                    : <span className={s.displayCount}>{props.value}</span>\r\n            : <span className={`${s.displayCount} ${s.errorSettings}`}>Incorrect value!</span>\r\n        }\r\n    </>\r\n}","import React from \"react\";\r\nimport s from \"../../App.module.css\"\r\nimport Button from \"../Button/Button\";\r\nimport {Display} from \"./Display\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nexport type CounterPropsType = {\r\n    value: number\r\n    incData: () => void\r\n    resData: () => void\r\n    maxValue: number\r\n    startValue: number\r\n    isMessage: boolean\r\n    condition: boolean\r\n    type: \"counterV1\" | \"counterV2\"\r\n}\r\n\r\nconst CounterDisplay = (props: CounterPropsType) => {\r\n\r\n    const history = useHistory() //для изменения адреса\r\n\r\n    const setButtonHandler = () => { // попадаем в окно настроек из дисплея счетчика при клике по кнопке SET\r\n        history.push(\"/counterV2/settings\")\r\n    }\r\n\r\n    if (props.type === 'counterV1') {\r\n        return <div className={s.containerDisplay}>\r\n            <Display value={props.value}\r\n                     maxValue={props.maxValue}\r\n                     isMessage={props.isMessage}\r\n                     condition={props.condition}\r\n            />\r\n            <div className={s.containerButton}>\r\n                <Button\r\n                    titleButton={\"INC\"}\r\n                    disable={props.value >= props.maxValue}\r\n                    onClickHandler={props.incData}\r\n                />\r\n                <Button\r\n                    titleButton={\"RESET\"}\r\n                    disable={props.value <= props.startValue}\r\n                    onClickHandler={props.resData}\r\n                />\r\n            </div>\r\n        </div>\r\n    } else if (props.type === 'counterV2') {\r\n        return <div className={s.containerDisplay}>\r\n            <Display value={props.value}\r\n                     maxValue={props.maxValue}\r\n                     isMessage={props.isMessage}\r\n                     condition={props.condition}\r\n            />\r\n            <div className={s.containerButton}>\r\n                <Button\r\n                    titleButton={\"INC\"}\r\n                    disable={props.value >= props.maxValue}\r\n                    onClickHandler={props.incData}\r\n                />\r\n                <Button\r\n                    titleButton={\"RESET\"}\r\n                    disable={props.value <= props.startValue}\r\n                    onClickHandler={props.resData}\r\n                />\r\n                <Button\r\n                    titleButton={\"SET\"}\r\n                    disable={!!props.condition}\r\n                    onClickHandler={setButtonHandler}\r\n                />\r\n            </div>\r\n        </div>\r\n    } else {\r\n        return <div>no type defined</div>\r\n    }\r\n}\r\n\r\nexport default CounterDisplay\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from \"../../App.module.css\"\r\n\r\nexport type InputPropsType = {\r\n    title: string\r\n    value: number\r\n    onChangeCallback: (e: ChangeEvent<HTMLInputElement>) => void\r\n    condition: boolean\r\n}\r\n\r\nconst Input = (props: InputPropsType) => {\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onChangeCallback(e)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <span>{props.title}</span>\r\n            <input className={!props.condition ? s.input : `${s.input} ${s.errorInput}`}\r\n                   type=\"number\"\r\n                   onChange={onChangeHandler}\r\n                   value={props.value}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input","import React, {ChangeEvent} from \"react\";\r\nimport s from \"../../App.module.css\"\r\nimport Input from \"./Input\";\r\nimport Button from \"../Button/Button\";\r\n\r\nexport type SettingsPropsType = {\r\n    onClickSettings: () => void\r\n    startValue: number\r\n    maxValue: number\r\n    onChangeHandlerStart: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeHandlerMax: (e: ChangeEvent<HTMLInputElement>) => void\r\n    condition: boolean\r\n}\r\n\r\nexport function SettingsDisplay(props: SettingsPropsType) {\r\n    return <div className={s.containerDisplay}>\r\n        <div className={s.displaySet}>\r\n            <div className={s.containerInput}>\r\n                <Input title={\"start value: \"}\r\n                       value={props.startValue}\r\n                       onChangeCallback={props.onChangeHandlerStart}\r\n                       condition={props.condition}\r\n                />\r\n            </div>\r\n            <div className={s.parentDiv}>\r\n                <Input title={\"max value: \"}\r\n                       value={props.maxValue}\r\n                       onChangeCallback={props.onChangeHandlerMax}\r\n                       condition={props.condition}\r\n                />\r\n            </div>\r\n        </div>\r\n        <div className={s.containerButton}>\r\n            <Button\r\n                titleButton={\"SET\"}\r\n                onClickHandler={props.onClickSettings}\r\n                disable={!!props.condition}\r\n            />\r\n        </div>\r\n    </div>;\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from \"../App.module.css\";\r\nimport {Route, useHistory} from \"react-router-dom\";\r\nimport CounterDisplay from \"./CounterDisplay/CounterDisplay\";\r\nimport {SettingsDisplay} from \"./SettingsDisplay/SettingsDisplay\";\r\nimport {RootPropsType} from \"./SeparateDisplayRootComponent\";\r\n\r\nconst GeneralDisplayRootComponent = (props: RootPropsType) => {\r\n\r\n    const history = useHistory() //для изменение адреса\r\n\r\n    const onClickSettingsV2 = () => { // попадаем на дисплей счетчика из окна настроек при клике по кнопке SET\r\n        props.onClickSettings()\r\n        history.push(\"/counterV2\")\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Route exact path=\"/counterV2/settings\" render={() =>\r\n                <div className={s.containerRoot}>\r\n                    <SettingsDisplay\r\n                        startValue={props.startValue}\r\n                        maxValue={props.maxValue}\r\n\r\n                        onChangeHandlerStart={props.onChangeHandlerStart}\r\n                        onChangeHandlerMax={props.onChangeHandlerMax}\r\n\r\n                        condition={props.condition}\r\n                        onClickSettings={onClickSettingsV2}\r\n                    />\r\n                </div>}/>\r\n            <Route exact path=\"/counterV2\" render={() =>\r\n                <div className={s.containerRoot}>\r\n                    <CounterDisplay\r\n                        type={\"counterV2\"}\r\n                        value={props.value}\r\n                        incData={props.incData}\r\n                        resData={props.resData}\r\n                        maxValue={props.maxValue}\r\n                        startValue={props.startValue}\r\n                        isMessage={props.isMessage}\r\n                        condition={props.condition}\r\n                    />\r\n                </div>}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GeneralDisplayRootComponent","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './Navbar.module.css'\r\n\r\nexport function Navbar() {\r\n    return (\r\n        <div className={s.navbar}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/counterV1\" className={s.route}>Counter Vers.1</NavLink>\r\n            </div>\r\n            <div>\r\n                <NavLink to=\"/counterV2\" className={s.route}>Counter Vers.2</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from \"../App.module.css\"\r\nimport CounterDisplay from \"./CounterDisplay/CounterDisplay\";\r\nimport {SettingsDisplay} from \"./SettingsDisplay/SettingsDisplay\";\r\n\r\nexport type RootPropsType = {\r\n    value: number\r\n    startValue: number\r\n    maxValue: number\r\n    onChangeHandlerStart: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeHandlerMax: (e: ChangeEvent<HTMLInputElement>) => void\r\n    incData: () => void\r\n    resData: () => void\r\n    onClickSettings: () => void\r\n    isMessage: boolean\r\n    condition: boolean\r\n}\r\n\r\nconst SeparateDisplayRootComponent = (props: RootPropsType) => {\r\n\r\n    return (\r\n        <div className={s.containerRoot}>\r\n            <SettingsDisplay\r\n                startValue={props.startValue}\r\n                maxValue={props.maxValue}\r\n                onChangeHandlerStart={props.onChangeHandlerStart}\r\n                onChangeHandlerMax={props.onChangeHandlerMax}\r\n                onClickSettings={props.onClickSettings}\r\n                condition={props.condition}\r\n            />\r\n            <CounterDisplay\r\n                type={\"counterV1\"}\r\n                value={props.value}\r\n                incData={props.incData}\r\n                resData={props.resData}\r\n                maxValue={props.maxValue}\r\n                startValue={props.startValue}\r\n                isMessage={props.isMessage}\r\n                condition={props.condition}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SeparateDisplayRootComponent","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './App.module.css';\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"./bll/store\";\r\nimport {changeMaxValueAC, changeStartValueAC, incValueAC, resetAC, setValuesAC} from \"./bll/counter-reducer\";\r\nimport GeneralDisplayRootComponent from \"./components/GeneralDisplayRootComponent\";\r\nimport {Navbar} from \"./components/Navbar/Navbar\";\r\nimport SeparateDisplayRootComponent from \"./components/SeparateDisplayRootComponent\";\r\n\r\nconst App = () => {\r\n\r\n    const value = useSelector<AppStateType, number>(state => state.counter.value)\r\n    const startValue = useSelector<AppStateType, number>(state => state.counter.startValue)\r\n    const maxValue = useSelector<AppStateType, number>(state => state.counter.maxValue)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const condition = startValue < 0 || startValue > maxValue || startValue === maxValue // проверка на условия ввода\r\n\r\n    // const [countValue, setCountValue] = useState<number>(0) // текущее значение счетчика\r\n    // const [startInputValue, setStartInputValue] = useState(0) // стартовое значение счетчика\r\n    // const [maxInputValue, setMaxInputValue] = useState<number>(5) // макс значение счетчика\r\n\r\n    const [isMessage, setIsMessage] = useState<boolean>(true) // показывать или нет сообщения вместо value\r\n\r\n\r\n    // получаем стартовое и максимальное значения счетчика из Local Storage\r\n    // useEffect(() => {\r\n    //     const localStorageStartValueStr = localStorage.getItem(\"startInputValue\")\r\n    //     const localStorageMaxValueStr = localStorage.getItem(\"maxInputValue\")\r\n    //\r\n    //     if (localStorageStartValueStr) {\r\n    //         // setStartInputValue(JSON.parse(localStorageStartValueStr))\r\n    //     }\r\n    //     if (localStorageMaxValueStr) {\r\n    //         // setMaxInputValue(JSON.parse(localStorageMaxValueStr))\r\n    //     }\r\n    //     console.log(localStorageStartValueStr, localStorageMaxValueStr)\r\n    // }, [])\r\n\r\n    const incData = () => {  // увеличение счетчика на единицу\r\n        dispatch(incValueAC())\r\n    }\r\n\r\n    const resData = () => { // сброс значения счетчика до стартового\r\n        // setCountValue(startInputValue)\r\n        dispatch(resetAC())\r\n    }\r\n\r\n    // изменение стартового значения в настройках\r\n    const onChangeHandlerStart = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(changeStartValueAC(+e.currentTarget.value))\r\n        setIsMessage(false)\r\n    }\r\n\r\n    // изменение максимального значения в настройках\r\n    const onChangeHandlerMax = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(changeMaxValueAC(+e.currentTarget.value))\r\n        setIsMessage(false)\r\n    }\r\n\r\n    const onClickSettings = () => { // передача настроек счетчика\r\n        dispatch(setValuesAC(startValue, maxValue))\r\n        setIsMessage(true)\r\n        // localStorage.setItem(\"startInputValue\", JSON.stringify(startValue))\r\n        // localStorage.setItem(\"maxInputValue\", JSON.stringify(maxValue))\r\n\r\n        console.log(startValue, maxValue, value)\r\n    }\r\n\r\n    return <div className={s.app}>\r\n        <Navbar/>\r\n        <Switch>\r\n            <Route path={'/'} exact render={() => <Redirect to=\"/counterV1\"/>}/>\r\n            <Route path=\"/counterV1\" render={() => <SeparateDisplayRootComponent\r\n                value={value}\r\n                startValue={startValue}\r\n                maxValue={maxValue}\r\n\r\n                incData={incData}\r\n                resData={resData}\r\n\r\n                onChangeHandlerStart={onChangeHandlerStart}\r\n                onChangeHandlerMax={onChangeHandlerMax}\r\n                onClickSettings={onClickSettings}\r\n\r\n                isMessage={isMessage}\r\n                condition={condition}\r\n            />}/>\r\n            <Route path=\"/counterV2\" render={() => <GeneralDisplayRootComponent\r\n                value={value}\r\n                startValue={startValue}\r\n                maxValue={maxValue}\r\n\r\n                incData={incData}\r\n                resData={resData}\r\n\r\n                onChangeHandlerStart={onChangeHandlerStart}\r\n                onChangeHandlerMax={onChangeHandlerMax}\r\n                onClickSettings={onClickSettings}\r\n\r\n                isMessage={isMessage}\r\n                condition={condition}\r\n            />}/>\r\n        </Switch>\r\n    </div>\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\nimport {loadState, saveState} from \"../utils/localstorage-utils\";\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, loadState())\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        counter: store.getState().counter\r\n    })\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n","import {AppStateType} from \"../bll/store\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('app-state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state: AppStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./bll/store\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}