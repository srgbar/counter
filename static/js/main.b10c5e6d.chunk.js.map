{"version":3,"sources":["App.module.css","Navbar/Navbar.module.css","components/Button/Button.tsx","components/Counter/Display.tsx","components/Counter/CounterDisplay.tsx","components/Settings/Input.tsx","components/Settings/SettingsDisplay.tsx","components/RootComponent.tsx","Navbar/Navbar.tsx","components/General Display/GeneralDisplay.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","props","className","s","button","disabled","disable","onClick","onClickHandler","titleButton","Display","condition","displayCount","errorSettings","isMessage","countValue","maxInputValue","maxValue","errorName","messageName","CounterDisplay","history","useHistory","type","containerDisplay","containerButton","incData","resData","push","Input","title","input","errorInput","onChange","e","onChangeCallback","value","SettingsDisplay","displaySet","containerInput","startInputValue","onChangeHandlerStart","parentDiv","onChangeHandlerMax","onClickSettings","RootComponent","containerRoot","Navbar","navbar","item","to","route","GeneralDisplay","onClickSettingsV2","exact","path","render","App","useState","setCountValue","setStartInputValue","setMaxInputValue","setIsMessage","useEffect","localStorageStartValueStr","localStorage","getItem","localStorageMaxValueStr","JSON","parse","setItem","stringify","currentTarget","app","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,cAAgB,2BAA2B,iBAAmB,8BAA8B,aAAe,0BAA0B,WAAa,wBAAwB,eAAiB,4BAA4B,MAAQ,mBAAmB,WAAa,wBAAwB,gBAAkB,6BAA6B,OAAS,oBAAoB,SAAW,sBAAsB,UAAY,uBAAuB,YAAc,yBAAyB,cAAgB,6B,mBCAvgBD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,qBAAqB,MAAQ,wB,qKCiBvEC,EATA,SAACC,GACZ,OAAO,oCACH,4BAAQC,UAAWC,IAAEC,OACbC,SAAUJ,EAAMK,QAChBC,QAAS,kBAAMN,EAAMO,mBAC3BP,EAAMQ,eCJT,SAASC,EAAQT,GAEpB,OAAO,oCACDA,EAAMU,UASF,0BAAMT,UAAS,UAAKC,IAAES,aAAP,YAAuBT,IAAEU,gBAAxC,oBARCZ,EAAMa,UAEHb,EAAMc,YAAcd,EAAMe,cACtB,yBAAKd,UAAS,UAAKC,IAAES,aAAP,YAAuBT,IAAEc,WACrC,8BAAOhB,EAAMc,YACb,0BAAMb,UAAWC,IAAEe,WAAnB,cAEF,0BAAMhB,UAAWC,IAAES,cAAeX,EAAMc,YAN5C,0BAAMb,UAAS,UAAKC,IAAES,aAAP,YAAuBT,IAAEgB,cAAxC,iC,WC2DHC,EA1DQ,SAACnB,GAEpB,IAAMoB,EAAUC,cAMhB,MAAmB,cAAfrB,EAAMsB,KACC,yBAAKrB,UAAWC,IAAEqB,kBACrB,kBAACd,EAAD,CAASK,WAAYd,EAAMc,WAClBC,cAAef,EAAMe,cACrBF,UAAWb,EAAMa,UACjBH,UAAWV,EAAMU,YAE1B,yBAAKT,UAAWC,IAAEsB,iBACd,kBAAC,EAAD,CACIhB,YAAa,MACbH,QAASL,EAAMc,YAAcd,EAAMe,cACnCR,eAAgBP,EAAMyB,UAE1B,kBAAC,EAAD,CACIjB,YAAa,QACbH,QAASL,EAAMc,YAAc,EAC7BP,eAAgBP,EAAM0B,YAIZ,cAAf1B,EAAMsB,KACN,yBAAKrB,UAAWC,IAAEqB,kBACrB,kBAACd,EAAD,CAASK,WAAYd,EAAMc,WAClBC,cAAef,EAAMe,cACrBF,UAAWb,EAAMa,UACjBH,UAAWV,EAAMU,YAE1B,yBAAKT,UAAWC,IAAEsB,iBACd,kBAAC,EAAD,CACIhB,YAAa,MACbH,QAASL,EAAMc,YAAcd,EAAMe,cACnCR,eAAgBP,EAAMyB,UAE1B,kBAAC,EAAD,CACIjB,YAAa,QACbH,QAASL,EAAMc,YAAc,EAC7BP,eAAgBP,EAAM0B,UAE1B,kBAAC,EAAD,CACIlB,YAAa,MACbH,UAAWL,EAAMU,UACjBH,eA7CS,WACrBa,EAAQO,KAAK,4BAiDN,iDC1CAC,EAlBD,SAAC5B,GAMX,OACI,6BACI,8BAAOA,EAAM6B,OACb,2BAAO5B,UAAYD,EAAMU,UAAP,UAAgCR,IAAE4B,MAAlC,YAA2C5B,IAAE6B,YAA1B7B,IAAE4B,MAChCR,KAAK,SACLU,SATS,SAACC,GACrBjC,EAAMkC,iBAAiBD,IASZE,MAAOnC,EAAMc,eCRzB,SAASsB,EAAgBpC,GAC5B,OAAO,yBAAKC,UAAWC,IAAEqB,kBACrB,yBAAKtB,UAAWC,IAAEmC,YACd,yBAAKpC,UAAWC,IAAEoC,gBACd,kBAAC,EAAD,CAAOT,MAAO,gBACPf,WAAYd,EAAMuC,gBAClBL,iBAAkBlC,EAAMwC,qBACxB9B,UAAWV,EAAMU,aAG5B,yBAAKT,UAAWC,IAAEuC,WACd,kBAAC,EAAD,CAAOZ,MAAO,cACPf,WAAYd,EAAMe,cAClBmB,iBAAkBlC,EAAM0C,mBACxBhC,UAAWV,EAAMU,cAIhC,yBAAKT,UAAWC,IAAEsB,iBACd,kBAAC,EAAD,CACIhB,YAAa,MACbD,eAAgBP,EAAM2C,gBACtBtC,UAAWL,EAAMU,cClBjC,IAuBekC,EAvBO,SAAC5C,GAEnB,OACI,yBAAKC,UAAWC,IAAE2C,eACd,kBAACT,EAAD,CAAiBI,qBAAsBxC,EAAMwC,qBAC5BE,mBAAoB1C,EAAM0C,mBAC1BH,gBAAiBvC,EAAMuC,gBACvBxB,cAAef,EAAMe,cACrB4B,gBAAiB3C,EAAM2C,gBACvBjC,UAAWV,EAAMU,YAElC,kBAAC,EAAD,CAAgBY,KAAM,YACNR,WAAYd,EAAMc,WAClBW,QAASzB,EAAMyB,QACfC,QAAS1B,EAAM0B,QACfX,cAAef,EAAMe,cACrBF,UAAWb,EAAMa,UACjBH,UAAWV,EAAMU,c,wBC/BtC,SAASoC,IACZ,OACI,yBAAK7C,UAAWC,IAAE6C,QACd,yBAAK9C,UAAWC,IAAE8C,MACd,kBAAC,IAAD,CAASC,GAAG,aAAahD,UAAWC,IAAEgD,OAAtC,mBAEJ,6BACI,kBAAC,IAAD,CAASD,GAAG,aAAahD,UAAWC,IAAEgD,OAAtC,oBCQhB,IAsCeC,EAtCQ,SAACnD,GAEpB,IAAMoB,EAAUC,cAEV+B,EAAoB,WACtBpD,EAAM2C,kBACNvB,EAAQO,KAAK,eAGjB,OACI,6BACI,kBAAC,IAAD,CAAO0B,OAAK,EAACC,KAAK,aAAaC,OAAQ,kBACnC,yBAAKtD,UAAWC,IAAE2C,eACd,kBAAC,EAAD,CACIvB,KAAM,YACNR,WAAYd,EAAMc,WAClBW,QAASzB,EAAMyB,QACfC,QAAS1B,EAAM0B,QACfX,cAAef,EAAMe,cACrBF,UAAWb,EAAMa,UACjBH,UAAWV,EAAMU,gBAG7B,kBAAC,IAAD,CAAO2C,OAAK,EAACC,KAAK,sBAAsBC,OAAQ,kBAC5C,yBAAKtD,UAAWC,IAAE2C,eACd,kBAACT,EAAD,CACII,qBAAsBxC,EAAMwC,qBAC5BE,mBAAoB1C,EAAM0C,mBAC1BH,gBAAiBvC,EAAMuC,gBACvBxB,cAAef,EAAMe,cACrBL,UAAWV,EAAMU,UACjBiC,gBAAiBS,UC4C1BI,EAvFH,WAER,MAAoCC,mBAAiB,GAArD,mBAAO3C,EAAP,KAAmB4C,EAAnB,KACA,EAA8CD,mBAAS,GAAvD,mBAAOlB,EAAP,KAAwBoB,EAAxB,KACA,EAA0CF,mBAAiB,GAA3D,mBAAO1C,EAAP,KAAsB6C,EAAtB,KACA,EAAkCH,oBAAkB,GAApD,mBAAO5C,EAAP,KAAkBgD,EAAlB,KACMnD,EAAY6B,EAAkB,GAAKA,EAAkBxB,GAAiBwB,IAAoBxB,EAGhG+C,qBAAU,WACN,IAAMC,EAA4BC,aAAaC,QAAQ,mBACjDC,EAA0BF,aAAaC,QAAQ,iBAEjDF,GACAJ,EAAmBQ,KAAKC,MAAML,IAE9BG,GACAN,EAAiBO,KAAKC,MAAMF,MAEjC,IAEH,IAAMzC,EAAU,WACZiC,EAAc5C,EAAa,IAGzBY,EAAU,WACZgC,EAAcnB,IAGZI,EAAkB,WACpBe,EAAcnB,GACdqB,EAAiB7C,GACjB8C,GAAa,GACbG,aAAaK,QAAQ,kBAAmBF,KAAKG,UAAU/B,IACvDyB,aAAaK,QAAQ,gBAAiBF,KAAKG,UAAUvD,KAInDyB,EAAuB,SAACP,GAC1B0B,GAAoB1B,EAAEsC,cAAcpC,OACpC0B,GAAa,IAIXnB,EAAqB,SAACT,GACxB2B,GAAkB3B,EAAEsC,cAAcpC,OAClC0B,GAAa,IAGjB,OAAO,yBAAK5D,UAAWC,IAAEsE,KACrB,kBAAC1B,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOQ,KAAM,IAAKD,OAAK,EAACE,OAAQ,kBAAM,kBAAC,IAAD,CAAUN,GAAG,kBACnD,kBAAC,IAAD,CAAOK,KAAK,aAAaC,OAAQ,kBAAM,kBAAC,EAAD,CACnCzC,WAAYA,EACZyB,gBAAiBA,EACjBxB,cAAeA,EAEfU,QAASA,EACTC,QAASA,EAETc,qBAAsBA,EACtBE,mBAAoBA,EACpBC,gBAAiBA,EAEjB9B,UAAWA,EACXH,UAAWA,OAEf,kBAAC,IAAD,CAAO4C,KAAK,aAAaC,OAAQ,kBAAM,kBAAC,EAAD,CACnCzC,WAAYA,EACZyB,gBAAiBA,EACjBxB,cAAeA,EAEfU,QAASA,EACTC,QAASA,EAETc,qBAAsBA,EACtBE,mBAAoBA,EACpBC,gBAAiBA,EAEjB9B,UAAWA,EACXH,UAAWA,UC5EP+D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASvB,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OACWwB,SAASC,eAAe,SDiIrC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b10c5e6d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2EKaZ\",\"containerRoot\":\"App_containerRoot__1J6yA\",\"containerDisplay\":\"App_containerDisplay__HElCB\",\"displayCount\":\"App_displayCount__17GWa\",\"displaySet\":\"App_displaySet__2lS5x\",\"containerInput\":\"App_containerInput__rICeR\",\"input\":\"App_input__X7vMi\",\"errorInput\":\"App_errorInput__1E9_T\",\"containerButton\":\"App_containerButton__3F7kN\",\"button\":\"App_button__2hzAu\",\"maxValue\":\"App_maxValue__3Wz6Y\",\"errorName\":\"App_errorName__2zQfg\",\"messageName\":\"App_messageName__2LIA8\",\"errorSettings\":\"App_errorSettings__12fpE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__1dFgZ\",\"item\":\"Navbar_item__Clv_8\",\"route\":\"Navbar_route__2phpO\"};","import React from \"react\";\r\nimport s from \"../../App.module.css\"\r\n\r\nexport type ButtonPropsType = {\r\n    titleButton: string\r\n    disable: boolean\r\n    onClickHandler: () => void\r\n}\r\n\r\nconst Button = (props: ButtonPropsType) => {\r\n    return <>\r\n        <button className={s.button}\r\n                disabled={props.disable}\r\n                onClick={() => props.onClickHandler()}\r\n        >{props.titleButton}</button>\r\n    </>\r\n}\r\n\r\nexport default Button\r\n","import React from \"react\";\r\nimport s from \"../../App.module.css\"\r\n\r\ntype DisplayPropsType = {\r\n    countValue: number\r\n    maxInputValue: number\r\n    isMessage: boolean\r\n    condition: boolean\r\n}\r\n\r\nexport function Display(props: DisplayPropsType) {\r\n\r\n    return <>\r\n        {!props.condition\r\n            ? !props.isMessage\r\n                ? <span className={`${s.displayCount} ${s.messageName}`}>Enter values and press 'set'</span>\r\n                : props.countValue >= props.maxInputValue\r\n                    ? <div className={`${s.displayCount} ${s.maxValue}`}>\r\n                        <span>{props.countValue}</span>\r\n                        <span className={s.errorName}>max value</span>\r\n                    </div>\r\n                    : <span className={s.displayCount}>{props.countValue}</span>\r\n            : <span className={`${s.displayCount} ${s.errorSettings}`}>Incorrect value!</span>\r\n        }\r\n    </>\r\n}","import React from \"react\";\r\nimport s from \"../../App.module.css\"\r\nimport Button from \"../Button/Button\";\r\nimport {Display} from \"./Display\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nexport type CounterPropsType = {\r\n    type: \"counterV1\" | \"counterV2\"\r\n    countValue: number\r\n    incData: () => void\r\n    resData: () => void\r\n    maxInputValue: number\r\n    isMessage: boolean\r\n    condition: boolean\r\n}\r\n\r\nconst CounterDisplay = (props: CounterPropsType) => {\r\n\r\n    const history = useHistory() //для изменение адреса\r\n\r\n    const setButtonHandler = () => { // попадаем в окно настроек из дисплея счетчика при клике по кнопке SET\r\n        history.push(\"/counterV2/settings\")\r\n    }\r\n\r\n    if (props.type === 'counterV1') {\r\n        return <div className={s.containerDisplay}>\r\n            <Display countValue={props.countValue}\r\n                     maxInputValue={props.maxInputValue}\r\n                     isMessage={props.isMessage}\r\n                     condition={props.condition}\r\n            />\r\n            <div className={s.containerButton}>\r\n                <Button\r\n                    titleButton={\"INC\"}\r\n                    disable={props.countValue >= props.maxInputValue}\r\n                    onClickHandler={props.incData}\r\n                />\r\n                <Button\r\n                    titleButton={\"RESET\"}\r\n                    disable={props.countValue <= 0}\r\n                    onClickHandler={props.resData}\r\n                />\r\n            </div>\r\n        </div>\r\n    } else if (props.type === 'counterV2') {\r\n        return <div className={s.containerDisplay}>\r\n            <Display countValue={props.countValue}\r\n                     maxInputValue={props.maxInputValue}\r\n                     isMessage={props.isMessage}\r\n                     condition={props.condition}\r\n            />\r\n            <div className={s.containerButton}>\r\n                <Button\r\n                    titleButton={\"INC\"}\r\n                    disable={props.countValue >= props.maxInputValue}\r\n                    onClickHandler={props.incData}\r\n                />\r\n                <Button\r\n                    titleButton={\"RESET\"}\r\n                    disable={props.countValue <= 0}\r\n                    onClickHandler={props.resData}\r\n                />\r\n                <Button\r\n                    titleButton={\"SET\"}\r\n                    disable={!!props.condition}\r\n                    onClickHandler={setButtonHandler}\r\n                />\r\n            </div>\r\n        </div>\r\n    } else {\r\n        return <div>no type defined</div>\r\n    }\r\n}\r\n\r\nexport default CounterDisplay\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from \"../../App.module.css\"\r\n\r\nexport type InputPropsType = {\r\n    title: string\r\n    countValue: number\r\n    onChangeCallback: (e: ChangeEvent<HTMLInputElement>) => void\r\n    condition: boolean\r\n}\r\n\r\nconst Input = (props: InputPropsType) => {\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onChangeCallback(e)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <span>{props.title}</span>\r\n            <input className={!props.condition ? s.input : `${s.input} ${s.errorInput}`}\r\n                   type=\"number\"\r\n                   onChange={onChangeHandler}\r\n                   value={props.countValue}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input","import React, {ChangeEvent} from \"react\";\r\nimport s from \"../../App.module.css\"\r\nimport Input from \"./Input\";\r\nimport Button from \"../Button/Button\";\r\n\r\nexport type SettingsPropsType = {\r\n    onClickSettings: () => void\r\n    startInputValue: number\r\n    maxInputValue: number\r\n    onChangeHandlerStart: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeHandlerMax: (e: ChangeEvent<HTMLInputElement>) => void\r\n    condition: boolean\r\n}\r\n\r\nexport function SettingsDisplay(props: SettingsPropsType) {\r\n    return <div className={s.containerDisplay}>\r\n        <div className={s.displaySet}>\r\n            <div className={s.containerInput}>\r\n                <Input title={\"start value: \"}\r\n                       countValue={props.startInputValue}\r\n                       onChangeCallback={props.onChangeHandlerStart}\r\n                       condition={props.condition}\r\n                />\r\n            </div>\r\n            <div className={s.parentDiv}>\r\n                <Input title={\"max value: \"}\r\n                       countValue={props.maxInputValue}\r\n                       onChangeCallback={props.onChangeHandlerMax}\r\n                       condition={props.condition}\r\n                />\r\n            </div>\r\n        </div>\r\n        <div className={s.containerButton}>\r\n            <Button\r\n                titleButton={\"SET\"}\r\n                onClickHandler={props.onClickSettings}\r\n                disable={!!props.condition}\r\n            />\r\n        </div>\r\n    </div>;\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from \"../App.module.css\"\r\nimport CounterDisplay from \"./Counter/CounterDisplay\";\r\nimport {SettingsDisplay} from \"./Settings/SettingsDisplay\";\r\n\r\nexport type RootPropsType = {\r\n    countValue: number\r\n    startInputValue: number\r\n    maxInputValue: number\r\n    onChangeHandlerStart: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeHandlerMax: (e: ChangeEvent<HTMLInputElement>) => void\r\n    incData: () => void\r\n    resData: () => void\r\n    onClickSettings: () => void\r\n    isMessage: boolean\r\n    condition: boolean\r\n}\r\n\r\nconst RootComponent = (props: RootPropsType) => {\r\n\r\n    return (\r\n        <div className={s.containerRoot}>\r\n            <SettingsDisplay onChangeHandlerStart={props.onChangeHandlerStart}\r\n                             onChangeHandlerMax={props.onChangeHandlerMax}\r\n                             startInputValue={props.startInputValue}\r\n                             maxInputValue={props.maxInputValue}\r\n                             onClickSettings={props.onClickSettings}\r\n                             condition={props.condition}\r\n            />\r\n            <CounterDisplay type={\"counterV1\"}\r\n                            countValue={props.countValue}\r\n                            incData={props.incData}\r\n                            resData={props.resData}\r\n                            maxInputValue={props.maxInputValue}\r\n                            isMessage={props.isMessage}\r\n                            condition={props.condition}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RootComponent","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './Navbar.module.css'\r\n\r\nexport function Navbar() {\r\n    return (\r\n        <div className={s.navbar}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/counterV1\" className={s.route}>Counter Vers.1</NavLink>\r\n            </div>\r\n            <div>\r\n                <NavLink to=\"/counterV2\" className={s.route}>Counter Vers.2</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from \"../../App.module.css\";\r\nimport CounterDisplay from \"../Counter/CounterDisplay\";\r\nimport {Route, useHistory} from \"react-router-dom\";\r\nimport {SettingsDisplay} from \"../Settings/SettingsDisplay\";\r\n\r\nexport type RootPropsType = {\r\n    countValue: number\r\n    startInputValue: number\r\n    maxInputValue: number\r\n    onChangeHandlerStart: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeHandlerMax: (e: ChangeEvent<HTMLInputElement>) => void\r\n    incData: () => void\r\n    resData: () => void\r\n    onClickSettings: () => void\r\n    isMessage: boolean\r\n    condition: boolean\r\n}\r\n\r\nconst GeneralDisplay = (props: RootPropsType) => {\r\n\r\n    const history = useHistory() //для изменение адреса\r\n\r\n    const onClickSettingsV2 = () => { // попадаем на дисплей счетчика из окна настроек при клике по кнопке SET\r\n        props.onClickSettings()\r\n        history.push(\"/counterV2\")\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Route exact path=\"/counterV2\" render={() =>\r\n                <div className={s.containerRoot}>\r\n                    <CounterDisplay\r\n                        type={\"counterV2\"}\r\n                        countValue={props.countValue}\r\n                        incData={props.incData}\r\n                        resData={props.resData}\r\n                        maxInputValue={props.maxInputValue}\r\n                        isMessage={props.isMessage}\r\n                        condition={props.condition}\r\n                    />\r\n                </div>}/>\r\n            <Route exact path=\"/counterV2/settings\" render={() =>\r\n                <div className={s.containerRoot}>\r\n                    <SettingsDisplay\r\n                        onChangeHandlerStart={props.onChangeHandlerStart}\r\n                        onChangeHandlerMax={props.onChangeHandlerMax}\r\n                        startInputValue={props.startInputValue}\r\n                        maxInputValue={props.maxInputValue}\r\n                        condition={props.condition}\r\n                        onClickSettings={onClickSettingsV2}\r\n                    />\r\n                </div>}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GeneralDisplay","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './App.module.css';\r\nimport RootComponent from \"./components/RootComponent\";\r\nimport {Navbar} from \"./Navbar/Navbar\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport GeneralDisplay from \"./components/General Display/GeneralDisplay\";\r\n\r\nconst App = () => {\r\n\r\n    const [countValue, setCountValue] = useState<number>(0) // текущее значение счетчика\r\n    const [startInputValue, setStartInputValue] = useState(0) // стартовое значение счетчика\r\n    const [maxInputValue, setMaxInputValue] = useState<number>(5) // макс значение счетчика\r\n    const [isMessage, setIsMessage] = useState<boolean>(true) // показывать или нет сообщения вместо value\r\n    const condition = startInputValue < 0 || startInputValue > maxInputValue || startInputValue === maxInputValue // проверка на условия ввода\r\n\r\n    // сохраняем стартовое и максимальное значения счетчика в Local Storage\r\n    useEffect(() => {\r\n        const localStorageStartValueStr = localStorage.getItem(\"startInputValue\")\r\n        const localStorageMaxValueStr = localStorage.getItem(\"maxInputValue\")\r\n\r\n        if (localStorageStartValueStr) {\r\n            setStartInputValue(JSON.parse(localStorageStartValueStr))\r\n        }\r\n        if (localStorageMaxValueStr) {\r\n            setMaxInputValue(JSON.parse(localStorageMaxValueStr))\r\n        }\r\n    }, [])\r\n\r\n    const incData = () => {  // увеличение счетчика на единицу\r\n        setCountValue(countValue + 1)\r\n    }\r\n\r\n    const resData = () => { // сброс значения счетчика до стартового\r\n        setCountValue(startInputValue)\r\n    }\r\n\r\n    const onClickSettings = () => { // передача настроек счетчика\r\n        setCountValue(startInputValue)\r\n        setMaxInputValue(maxInputValue)\r\n        setIsMessage(true)\r\n        localStorage.setItem(\"startInputValue\", JSON.stringify(startInputValue))\r\n        localStorage.setItem(\"maxInputValue\", JSON.stringify(maxInputValue))\r\n    }\r\n\r\n    // изменение стартового значения в настройках\r\n    const onChangeHandlerStart = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStartInputValue(+e.currentTarget.value)\r\n        setIsMessage(false)\r\n    }\r\n\r\n    // изменение максимального значения в настройках\r\n    const onChangeHandlerMax = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setMaxInputValue(+e.currentTarget.value)\r\n        setIsMessage(false)\r\n    }\r\n\r\n    return <div className={s.app}>\r\n        <Navbar/>\r\n        <Switch>\r\n            <Route path={'/'} exact render={() => <Redirect to=\"/counterV1\"/>}/>\r\n            <Route path=\"/counterV1\" render={() => <RootComponent\r\n                countValue={countValue}\r\n                startInputValue={startInputValue}\r\n                maxInputValue={maxInputValue}\r\n\r\n                incData={incData}\r\n                resData={resData}\r\n\r\n                onChangeHandlerStart={onChangeHandlerStart}\r\n                onChangeHandlerMax={onChangeHandlerMax}\r\n                onClickSettings={onClickSettings}\r\n\r\n                isMessage={isMessage}\r\n                condition={condition}\r\n            />}/>\r\n            <Route path=\"/counterV2\" render={() => <GeneralDisplay\r\n                countValue={countValue}\r\n                startInputValue={startInputValue}\r\n                maxInputValue={maxInputValue}\r\n\r\n                incData={incData}\r\n                resData={resData}\r\n\r\n                onChangeHandlerStart={onChangeHandlerStart}\r\n                onChangeHandlerMax={onChangeHandlerMax}\r\n                onClickSettings={onClickSettings}\r\n\r\n                isMessage={isMessage}\r\n                condition={condition}\r\n            />}/>\r\n        </Switch>\r\n    </div>\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <App/>\r\n    </HashRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}