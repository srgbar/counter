{"version":3,"sources":["App.module.css","components/Button/Button.tsx","components/Counter/Display.tsx","components/Counter/CounterDisplay.tsx","components/Settings/Input.tsx","components/Settings/SettingsDisplay.tsx","components/RootComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","props","className","s","button","disabled","disable","onClick","onClickHandler","titleButton","Display","condition","displayCount","errorSettings","isMessage","countValue","maxInputValue","maxValue","errorName","messageName","CounterDisplay","containerDisplay","containerButton","incData","resData","Input","title","input","errorInput","type","onChange","e","onChangeCallback","value","SettingsDisplay","displaySet","containerInput","startInputValue","onChangeHandlerStart","parentDiv","onChangeHandlerMax","onClickSettings","RootComponent","containerRoot","App","useState","setCountValue","setStartInputValue","setMaxInputValue","setIsMessage","app","currentTarget","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,cAAgB,2BAA2B,iBAAmB,8BAA8B,aAAe,0BAA0B,WAAa,wBAAwB,eAAiB,4BAA4B,MAAQ,mBAAmB,WAAa,wBAAwB,gBAAkB,6BAA6B,OAAS,oBAAoB,SAAW,sBAAsB,UAAY,uBAAuB,YAAc,yBAAyB,cAAgB,6B,iKCiBxfC,EATA,SAACC,GACZ,OAAO,oCACH,4BAAQC,UAAWC,IAAEC,OACbC,SAAUJ,EAAMK,QAChBC,QAAS,kBAAMN,EAAMO,mBAC3BP,EAAMQ,eCJT,SAASC,EAAQT,GAEpB,OAAO,oCACDA,EAAMU,UASF,0BAAMT,UAAS,UAAKC,IAAES,aAAP,YAAuBT,IAAEU,gBAAxC,oBARCZ,EAAMa,UAEHb,EAAMc,YAAcd,EAAMe,cACtB,yBAAKd,UAAS,UAAKC,IAAES,aAAP,YAAuBT,IAAEc,WACrC,8BAAOhB,EAAMc,YACb,0BAAMb,UAAWC,IAAEe,WAAnB,cAEF,0BAAMhB,UAAWC,IAAES,cAAeX,EAAMc,YAN5C,0BAAMb,UAAS,UAAKC,IAAES,aAAP,YAAuBT,IAAEgB,cAAxC,iCCDlB,IAsBeC,EAtBQ,SAACnB,GACpB,OAAO,yBAAKC,UAAWC,IAAEkB,kBACrB,kBAACX,EAAD,CAASK,WAAYd,EAAMc,WAClBC,cAAef,EAAMe,cACrBF,UAAWb,EAAMa,UACjBH,UAAWV,EAAMU,YAE1B,yBAAKT,UAAWC,IAAEmB,iBACd,kBAAC,EAAD,CACIb,YAAa,WACbH,QAASL,EAAMc,YAAcd,EAAMe,cACnCR,eAAgBP,EAAMsB,UAE1B,kBAAC,EAAD,CACId,YAAa,QACbH,QAASL,EAAMc,YAAc,EAC7BP,eAAgBP,EAAMuB,aCFvBC,EAlBD,SAACxB,GAMX,OACI,6BACI,8BAAOA,EAAMyB,OACb,2BAAOxB,UAAYD,EAAMU,UAAP,UAAgCR,IAAEwB,MAAlC,YAA2CxB,IAAEyB,YAA1BzB,IAAEwB,MAChCE,KAAK,SACLC,SATS,SAACC,GACrB9B,EAAM+B,iBAAiBD,IASZE,MAAOhC,EAAMc,eCRzB,SAASmB,EAAgBjC,GAE5B,OAAO,yBAAKC,UAAWC,IAAEkB,kBACrB,yBAAKnB,UAAWC,IAAEgC,YACd,yBAAKjC,UAAWC,IAAEiC,gBACd,kBAAC,EAAD,CAAOV,MAAO,gBACPX,WAAYd,EAAMoC,gBAClBL,iBAAkB/B,EAAMqC,qBACxB3B,UAAWV,EAAMU,aAG5B,yBAAKT,UAAWC,IAAEoC,WACd,kBAAC,EAAD,CAAOb,MAAO,cACPX,WAAYd,EAAMe,cAClBgB,iBAAkB/B,EAAMuC,mBACxB7B,UAAWV,EAAMU,cAIhC,yBAAKT,UAAWC,IAAEmB,iBACd,kBAAC,EAAD,CACIb,YAAa,MACbD,eAAgBP,EAAMwC,gBACtBnC,UAAWL,EAAMU,cCnBjC,IAwBe+B,EAxBO,SAACzC,GAEnB,OACI,yBAAKC,UAAWC,IAAEwC,eACd,kBAACT,EAAD,CACII,qBAAsBrC,EAAMqC,qBAC5BE,mBAAoBvC,EAAMuC,mBAC1BH,gBAAiBpC,EAAMoC,gBACvBrB,cAAef,EAAMe,cACrByB,gBAAiBxC,EAAMwC,gBACvB9B,UAAWV,EAAMU,YAErB,kBAAC,EAAD,CACII,WAAYd,EAAMc,WAClBQ,QAAStB,EAAMsB,QACfC,QAASvB,EAAMuB,QACfR,cAAef,EAAMe,cACrBF,UAAWb,EAAMa,UACjBH,UAAWV,EAAMU,cCwBlBiC,EAxDH,WAER,MAAoCC,mBAAiB,GAArD,mBAAO9B,EAAP,KAAmB+B,EAAnB,KACA,EAA8CD,mBAAiB,GAA/D,mBAAOR,EAAP,KAAwBU,EAAxB,KACA,EAA0CF,mBAAiB,GAA3D,mBAAO7B,EAAP,KAAsBgC,EAAtB,KACA,EAAkCH,oBAAkB,GAApD,mBAAO/B,EAAP,KAAkBmC,EAAlB,KAEMtC,EAAY0B,EAAkB,GAAKA,EAAkBrB,GAAiBqB,IAAoBrB,EA8BhG,OAAO,yBAAKd,UAAWC,IAAE+C,KACrB,0CACA,kBAAC,EAAD,CAAenC,WAAYA,EACZsB,gBAAiBA,EACjBrB,cAAeA,EAEfO,QAlCH,WACRc,EAAkBrB,GAClB8B,EAAc/B,EAAa,IAiChBS,QA7BH,WACZsB,EAAcT,IA8BCC,qBApBU,SAACP,GAC1BgB,GAAoBhB,EAAEoB,cAAclB,OACpCgB,GAAa,IAmBET,mBAfQ,SAACT,GACxBiB,GAAkBjB,EAAEoB,cAAclB,OAClCgB,GAAa,IAcER,gBA7BK,WACpBK,EAAcT,GACdW,EAAiBhC,GACjBiC,GAAa,IA4BEnC,UAAWA,EACXH,UAAWA,MC3CdyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d3ce2a3c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2EKaZ\",\"containerRoot\":\"App_containerRoot__1J6yA\",\"containerDisplay\":\"App_containerDisplay__HElCB\",\"displayCount\":\"App_displayCount__17GWa\",\"displaySet\":\"App_displaySet__2lS5x\",\"containerInput\":\"App_containerInput__rICeR\",\"input\":\"App_input__X7vMi\",\"errorInput\":\"App_errorInput__1E9_T\",\"containerButton\":\"App_containerButton__3F7kN\",\"button\":\"App_button__2hzAu\",\"maxValue\":\"App_maxValue__3Wz6Y\",\"errorName\":\"App_errorName__2zQfg\",\"messageName\":\"App_messageName__2LIA8\",\"errorSettings\":\"App_errorSettings__12fpE\"};","import React from \"react\";\r\nimport s from \"../../App.module.css\"\r\n\r\nexport type ButtonPropsType = {\r\n    titleButton: string\r\n    disable: boolean\r\n    onClickHandler: () => void\r\n}\r\n\r\nconst Button = (props: ButtonPropsType) => {\r\n    return <>\r\n        <button className={s.button}\r\n                disabled={props.disable}\r\n                onClick={() => props.onClickHandler()}\r\n        >{props.titleButton}</button>\r\n    </>\r\n}\r\n\r\nexport default Button\r\n","import React from \"react\";\r\nimport s from \"../../App.module.css\"\r\n\r\ntype DisplayPropsType = {\r\n    countValue: number\r\n    maxInputValue: number\r\n    isMessage: boolean\r\n    condition: boolean\r\n}\r\n\r\nexport function Display(props: DisplayPropsType) {\r\n\r\n    return <>\r\n        {!props.condition\r\n            ? !props.isMessage\r\n                ? <span className={`${s.displayCount} ${s.messageName}`}>Enter values and press 'set'</span>\r\n                : props.countValue >= props.maxInputValue\r\n                    ? <div className={`${s.displayCount} ${s.maxValue}`}>\r\n                        <span>{props.countValue}</span>\r\n                        <span className={s.errorName}>max value</span>\r\n                    </div>\r\n                    : <span className={s.displayCount}>{props.countValue}</span>\r\n            : <span className={`${s.displayCount} ${s.errorSettings}`}>Incorrect value!</span>\r\n        }\r\n    </>\r\n}","import React from \"react\";\r\nimport s from \"../../App.module.css\"\r\nimport Button from \"../Button/Button\";\r\nimport {Display} from \"./Display\";\r\n\r\nexport type CounterPropsType = {\r\n    countValue: number\r\n    incData: () => void\r\n    resData: () => void\r\n    maxInputValue: number\r\n    isMessage: boolean\r\n    condition: boolean\r\n}\r\n\r\nconst CounterDisplay = (props: CounterPropsType) => {\r\n    return <div className={s.containerDisplay}>\r\n        <Display countValue={props.countValue}\r\n                 maxInputValue={props.maxInputValue}\r\n                 isMessage={props.isMessage}\r\n                 condition={props.condition}\r\n        />\r\n        <div className={s.containerButton}>\r\n            <Button\r\n                titleButton={\"INCREASE\"}\r\n                disable={props.countValue >= props.maxInputValue}\r\n                onClickHandler={props.incData}\r\n            />\r\n            <Button\r\n                titleButton={\"RESET\"}\r\n                disable={props.countValue <= 0}\r\n                onClickHandler={props.resData}\r\n            />\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default CounterDisplay\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from \"../../App.module.css\"\r\n\r\nexport type InputPropsType = {\r\n    title: string\r\n    countValue: number\r\n    onChangeCallback: (e: ChangeEvent<HTMLInputElement>) => void\r\n    condition: boolean\r\n}\r\n\r\nconst Input = (props: InputPropsType) => {\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onChangeCallback(e)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <span>{props.title}</span>\r\n            <input className={!props.condition ? s.input : `${s.input} ${s.errorInput}`}\r\n                   type=\"number\"\r\n                   onChange={onChangeHandler}\r\n                   value={props.countValue}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input","import React, {ChangeEvent} from \"react\";\r\nimport s from \"../../App.module.css\"\r\nimport Input from \"./Input\";\r\nimport Button from \"../Button/Button\";\r\n\r\nexport type SettingsPropsType = {\r\n    onClickSettings: () => void\r\n    startInputValue: number\r\n    maxInputValue: number\r\n    onChangeHandlerStart: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeHandlerMax: (e: ChangeEvent<HTMLInputElement>) => void\r\n    condition: boolean\r\n}\r\n\r\nexport function SettingsDisplay(props: SettingsPropsType) {\r\n\r\n    return <div className={s.containerDisplay}>\r\n        <div className={s.displaySet}>\r\n            <div className={s.containerInput}>\r\n                <Input title={\"start value: \"}\r\n                       countValue={props.startInputValue}\r\n                       onChangeCallback={props.onChangeHandlerStart}\r\n                       condition={props.condition}\r\n                />\r\n            </div>\r\n            <div className={s.parentDiv}>\r\n                <Input title={\"max value: \"}\r\n                       countValue={props.maxInputValue}\r\n                       onChangeCallback={props.onChangeHandlerMax}\r\n                       condition={props.condition}\r\n                />\r\n            </div>\r\n        </div>\r\n        <div className={s.containerButton}>\r\n            <Button\r\n                titleButton={\"SET\"}\r\n                onClickHandler={props.onClickSettings}\r\n                disable={!!props.condition}\r\n            />\r\n        </div>\r\n    </div>;\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from \"../App.module.css\"\r\nimport CounterDisplay from \"./Counter/CounterDisplay\";\r\nimport {SettingsDisplay} from \"./Settings/SettingsDisplay\";\r\n\r\nexport type RootPropsType = {\r\n    countValue: number\r\n    startInputValue: number\r\n    maxInputValue: number\r\n    onChangeHandlerStart: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeHandlerMax: (e: ChangeEvent<HTMLInputElement>) => void\r\n    incData: () => void\r\n    resData: () => void\r\n    onClickSettings: () => void\r\n    isMessage: boolean\r\n    condition: boolean\r\n}\r\n\r\nconst RootComponent = (props: RootPropsType) => {\r\n\r\n    return (\r\n        <div className={s.containerRoot}>\r\n            <SettingsDisplay\r\n                onChangeHandlerStart={props.onChangeHandlerStart}\r\n                onChangeHandlerMax={props.onChangeHandlerMax}\r\n                startInputValue={props.startInputValue}\r\n                maxInputValue={props.maxInputValue}\r\n                onClickSettings={props.onClickSettings}\r\n                condition={props.condition}\r\n            />\r\n            <CounterDisplay\r\n                countValue={props.countValue}\r\n                incData={props.incData}\r\n                resData={props.resData}\r\n                maxInputValue={props.maxInputValue}\r\n                isMessage={props.isMessage}\r\n                condition={props.condition}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RootComponent","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './App.module.css';\r\nimport RootComponent from \"./components/RootComponent\";\r\n\r\nconst App = () => {\r\n\r\n    const [countValue, setCountValue] = useState<number>(0) // текущее значение счетчика\r\n    const [startInputValue, setStartInputValue] = useState<number>(0) // стартовое значение счетчика\r\n    const [maxInputValue, setMaxInputValue] = useState<number>(5) // макс значение счетчика\r\n    const [isMessage, setIsMessage] = useState<boolean>(true) // показывать или нет сообщения вместо value\r\n\r\n    const condition = startInputValue < 0 || startInputValue > maxInputValue || startInputValue === maxInputValue // проверка на условия ввода\r\n\r\n    const incData = () => {  // увеличение счетчика на единицу\r\n        if (startInputValue < maxInputValue) {\r\n            setCountValue(countValue + 1);\r\n        }\r\n    }\r\n\r\n    const resData = () => { // сброс значения счетчика до стартового\r\n        setCountValue(startInputValue);\r\n    }\r\n\r\n    const onClickSettings = () => { // передача настроек счетчика\r\n        setCountValue(startInputValue)\r\n        setMaxInputValue(maxInputValue)\r\n        setIsMessage(true)\r\n    }\r\n\r\n    // изменение стартового значения в настройках\r\n    const onChangeHandlerStart = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStartInputValue(+e.currentTarget.value)\r\n        setIsMessage(false)\r\n    }\r\n\r\n    // изменение максимального значения в настройках\r\n    const onChangeHandlerMax = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setMaxInputValue(+e.currentTarget.value)\r\n        setIsMessage(false)\r\n    }\r\n\r\n    return <div className={s.app}>\r\n        <h1>Counter v1</h1>\r\n        <RootComponent countValue={countValue}\r\n                       startInputValue={startInputValue}\r\n                       maxInputValue={maxInputValue}\r\n\r\n                       incData={incData}\r\n                       resData={resData}\r\n\r\n                       onChangeHandlerStart={onChangeHandlerStart}\r\n                       onChangeHandlerMax={onChangeHandlerMax}\r\n                       onClickSettings={onClickSettings}\r\n\r\n                       isMessage={isMessage}\r\n                       condition={condition}\r\n        />\r\n    </div>\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}